import pytest
import os
import pandas as pd
from datetime import datetime
from src.generation.utils import get_kdid_for_name

@pytest.fixture
def kodakondsus_df():
    """
    Reads '07_kodakondsus.csv', which is generated by the generate_kodakondsus function.
    parse_dates converts KodKehtibAlates, KodKehtibKuni, LoodiKpv, MuudetiKpv,
    KustutatiKpv into datetime so we can compare date ranges.
    """
    path = os.path.join("output", "07_kodakondsus.csv")
    df = pd.read_csv(
        path,
        parse_dates=["KodKehtibAlates","KodKehtibKuni","LoodiKpv","MuudetiKpv","KustutatiKpv"],
        encoding='ISO-8859-1'
    )
    return df

@pytest.fixture
def isik_df():
    """
    Optionally reads '06_isik.csv' (or another filename)
    to check whether Kodakondsus.IsID is found in Isik.IsID.
    """
    path = os.path.join("output", "06_isik.csv")
    if not os.path.exists(path):
        pytest.skip("06_isik.csv puudub, ei saa FK-d testida.")
    return pd.read_csv(path, encoding='ISO-8859-1')

@pytest.fixture
def kodifikaator_df():
    """
    Reads 'kodifikaator.csv' if we want to test KdIDStaatus, KdIDRiik, etc.
    """
    path = os.path.join("data", "kodifikaator.csv")
    if not os.path.exists(path):
        pytest.skip("kodifikaator.csv puudub, ei saa staatusloogikat testida.")
    return pd.read_csv(path, encoding='ISO-8859-1')


###############################################################################
# 1) Check that the main columns exist
###############################################################################

def test_kodakondsus_columns(kodakondsus_df):
    """
    Test1: Do the necessary columns exist:
      KodID, IsID, KdIDRiik, KodKehtibAlates, KodKehtibKuni,
      DokIDAlguseAlus, DokIDLopuAlus, KdIDStaatus, LoodiKpv,
      MuudetiKpv, KustutatiKpv, etc.?
    """
    required = [
        "KodID","IsID","KdIDRiik","KodKehtibAlates","KodKehtibKuni",
        "DokIDAlguseAlus","DokIDLopuAlus","KdIDStaatus",
        "LoodiKpv","MuudetiKpv","KustutatiKpv"
    ]
    missing = [c for c in required if c not in kodakondsus_df.columns]
    assert not missing, f"Puuduvad veerud: {missing}"

###############################################################################
# 2) Check KodID uniqueness and IsID reference to Isik
###############################################################################

def test_kodid_unique(kodakondsus_df):
    """
    Test2: KodID must be unique (primary key).
    """
    assert kodakondsus_df["KodID"].notnull().all(), "Leidsime tühje KodID väärtusi."
    dups = kodakondsus_df[kodakondsus_df["KodID"].duplicated()]
    assert dups.empty, f"Leidsime KodID dublikaate:\n{dups}"

def test_isid_fk(kodakondsus_df, isik_df):
    """
    Test3: Kodakondsus.IsID should reference isik_df.IsID (foreign key).
    """
    valid_isid = set(isik_df["IsID"].unique())
    used_isid = set(kodakondsus_df["IsID"].unique())
    missing = [val for val in used_isid if val not in valid_isid]
    assert not missing, f"Leidsime isikuid, kes puuduvad isik_tabelist: {missing}"

###############################################################################
# 3) Status logic:
#    - if KodKehtibKuni != None => KEHTETU
#    - if KustutatiKpv => KEHTETU
###############################################################################

def test_kodakondsus_end_date_implies_kehtetu(kodakondsus_df, kodifikaator_df):
    """
    Test4: If KodKehtibKuni != None, we assume KdIDStaatus= KEHTETU.
    """
    kd_kehtetu = get_kdid_for_name(kodifikaator_df, "KEHTETU")
    if kd_kehtetu is None:
        pytest.skip("Puudub KEHTETU kood, ei saa testida.")
    ended = kodakondsus_df[kodakondsus_df["KodKehtibKuni"].notnull()]
    mismatch = ended[ended["KdIDStaatus"] != kd_kehtetu]
    assert mismatch.empty, (
        "KodKehtibKuni != null => eeldame KdIDStaatus= KEHTETU, kuid:\n"
        f"{mismatch}"
    )

def test_kodakondsus_deleted_implies_kehtetu(kodakondsus_df, kodifikaator_df):
    """
    Test5: If KustutatiKpv is filled => KdIDStaatus=KEHTETU
    (the function sets kd_id_staatus=kehtetu).
    """
    kd_kehtetu = get_kdid_for_name(kodifikaator_df, "KEHTETU")
    if kd_kehtetu is None:
        pytest.skip("Puudub KEHTETU kood, ei saa testida.")
    deleted = kodakondsus_df[kodakondsus_df["KustutatiKpv"].notnull()]
    mismatch = deleted[deleted["KdIDStaatus"] != kd_kehtetu]
    assert mismatch.empty, (
        "KustutatiKpv != null => eeldame KdIDStaatus= KEHTETU, kuid:\n"
        f"{mismatch}"
    )

###############################################################################
# 4) Date logic: LoodiKpv <= KodKehtibAlates, MuudetiKpv, KustutatiKpv
###############################################################################

def test_loodi_before_alates(kodakondsus_df):
    """
    Test6: LoodiKpv <= KodKehtibAlates (the function sets LoodiKpv
    within [earliest_date..kod_kehtib_alates]).
    """
    invalid = kodakondsus_df[
        (kodakondsus_df["KodKehtibAlates"].notnull()) &
        (kodakondsus_df["LoodiKpv"] > kodakondsus_df["KodKehtibAlates"])
    ]
    assert invalid.empty, (
        "Leidsime ridu, kus LoodiKpv > KodKehtibAlates:\n"
        f"{invalid}"
    )

def test_modified_and_deleted(kodakondsus_df):
    """
    Test7: If KustutatiKpv is filled:
       - we assume MuudetiKpv >= KustutatiKpv (the function sets MuudetiKpv=KustutatiKpv if needed)
       - the status is set to kehtetu
       - we expect MuudetiKpv=KustutatiKpv (random < 0.05 => deleted).
    Steps:
      1) if KustutatiKpv => MuudetiKpv != None
      2) MuudetiKpv == KustutatiKpv
    """
    with_del = kodakondsus_df[kodakondsus_df["KustutatiKpv"].notnull()].copy()
    # 1) MuudetiKpv != null
    missing_muudeti = with_del[with_del["MuudetiKpv"].isnull()]
    assert missing_muudeti.empty, (
        "Kustutatud citizenshipil eeldame, et MuudetiKpv != null, "
        f"kuid leidus:\n{missing_muudeti}"
    )

    # 2) MuudetiKpv == KustutatiKpv
    mismatch = with_del[with_del["MuudetiKpv"] != with_del["KustutatiKpv"]]
    assert mismatch.empty, (
        "Kustutatud citizenshipil eeldame MuudetiKpv=KustutatiKpv, kuid:\n"
        f"{mismatch}"
    )

def test_modified_if_no_deleted(kodakondsus_df):
    """
    Test8: If KustutatiKpv is empty, the function logic is:
      50% chance of having MuudetiKpv or not.
    We can't do a strict range check. 
    Possibly we just ensure MuudetiKpv >= LoodiKpv if MuudetiKpv is not null.
    """
    no_del = kodakondsus_df[kodakondsus_df["KustutatiKpv"].isnull()].copy()
    invalid = no_del[
        no_del["MuudetiKpv"].notnull() & 
        (no_del["MuudetiKpv"] < no_del["LoodiKpv"])
    ]
    assert invalid.empty, (
        "Leidsime ridu, kus MuudetiKpv < LoodiKpv (pole kustutatud)!\n"
        f"{invalid}"
    )

###############################################################################
# 5) Document references: DokIDAlguseAlus, DokIDLopuAlus
###############################################################################

def test_doc_refs(kodakondsus_df):
    """
    Test9: 'DokIDAlguseAlus' = doc_id_counter + 1,
           sometimes DokIDLopuAlus = DokIDAlguseAlus+1 or None.
    We check that DokIDAlguseAlus != null.
    If DokIDLopuAlus != null, we assume it's >= DokIDAlguseAlus.
    """
    assert kodakondsus_df["DokIDAlguseAlus"].notnull().all(), (
        "Leidsime DokIDAlguseAlus = null, mis pole oodatud."
    )
    has_lopp = kodakondsus_df[kodakondsus_df["DokIDLopuAlus"].notnull()]
    mismatch = has_lopp[
        has_lopp["DokIDLopuAlus"] < has_lopp["DokIDAlguseAlus"]
    ]
    assert mismatch.empty, (
        "Kodakondsus: DokIDLopuAlus < DokIDAlguseAlus, mis on ebaloomulik.\n"
        f"{mismatch}"
    )

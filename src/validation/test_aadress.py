import pytest
import os
import pandas as pd
from src.generation.utils import get_kdid_for_name

##############################################################################
# 1) Pytest fixtures that read CSV files from the output folder
##############################################################################

@pytest.fixture
def kodifikaator_df():
    """
    Reads 'data/kodifikaator.csv' and returns a DataFrame.
    We assume it has columns such as:
       KdID, KdLyhikeNimi, KdKodifikaatoriKood, etc.
    """
    path = os.path.join("data", "kodifikaator.csv")
    df = pd.read_csv(path, encoding='ISO-8859-1')  # If needed, use encoding='latin-1'
    return df

@pytest.fixture
def aadress_df():
    """
    Reads 'output/01_aadress.csv', generated by the generate_aadress function.
    Since this file may have date-type columns (e.g., LoodiKpv, KustutatiKpv),
    we parse them with parse_dates=...
    """
    path = os.path.join("output", "01_aadress.csv")
    df = pd.read_csv(
        path,
        parse_dates=["LoodiKpv", "MuudetiKpv", "KustutatiKpv"],
        encoding='ISO-8859-1'
    )
    return df

@pytest.fixture
def aadress_komp_df():
    """
    Reads 'output/02_aadresskomponent.csv', generated by generate_aadress_komponent.
    It may also have date columns: AKpKehtivAlatesKpv, AKpKehtivKuniKpv, LoodiKpv, MuudetiKpv, KustutatiKpv.
    """
    path = os.path.join("output", "02_aadresskomponent.csv")
    df = pd.read_csv(
        path,
        parse_dates=["AKpKehtivAlatesKpv","AKpKehtivKuniKpv","LoodiKpv","MuudetiKpv","KustutatiKpv"],
        encoding='ISO-8859-1'
    )
    return df


##############################################################################
# 2) Example of a helper function to unify repeated FK checks 
#    against the kodifikaator DataFrame
##############################################################################

def check_kdid_foreign_key(df, column_name, kodifikaator_df, error_msg):
    """
    Checks that the values in 'df[column_name]' are found in kodifikaator_df['KdID'].
    If they are not, raises an assertion with the specified error message.

    :param df: Pandas DataFrame to check
    :param column_name: The column in df containing KdID references
    :param kodifikaator_df: DataFrame containing valid KdID codes
    :param error_msg: Error message to display if invalid KdIDs are found
    """
    if column_name not in df.columns:
        pytest.skip(f"Column '{column_name}' not found, skipping FK check.")
    used_codes = set(df[column_name].dropna().unique())
    valid_codes = set(kodifikaator_df["KdID"].dropna().unique())
    invalid = used_codes - valid_codes
    assert not invalid, f"{error_msg} {invalid}"


##############################################################################
# 3) Tests for the address CSV (01_aadress.csv)
##############################################################################

def test_aadress_fk_status(aadress_df, kodifikaator_df):
    """
    Check that 'KdIDAdressiStaatus' corresponds to a valid KdID in the kodifikaator.
    For example, 'KEHTIV', 'OOTEL', 'VIGANE', 'KEHTETU' should appear in kodifikaator.
    """
    check_kdid_foreign_key(
        df=aadress_df,
        column_name="KdIDAdressiStaatus",
        kodifikaator_df=kodifikaator_df,
        error_msg="Leidsime aadressis staatuskoode, mida kodifikaator ei tunne:"
    )


def test_aadress_zipcode_range(aadress_df):
    """
    Checks that 'AdrSihtnumber' (zip code) is in the range 10000..99999.
    """
    if "AdrSihtnumber" not in aadress_df.columns:
        pytest.skip("Puudub veerg AdrSihtnumber, ei saa testida.")
    invalid_rows = aadress_df[
        (aadress_df["AdrSihtnumber"] < 10000) |
        (aadress_df["AdrSihtnumber"] > 99999)
    ]
    assert invalid_rows.empty, (
        f"Leidsime sihtnumbrid, mis ei mahu 10000..99999 vahemikku:\n{invalid_rows}"
    )

def test_aadress_dates(aadress_df):
    """
    Example test for verifying that LoodiKpv <= MuudetiKpv <= KustutatiKpv, etc.
    Also checks that if KustutatiKpv is present, we expect KdIDAdressiStaatus to be KEHTETU (104).
    """
    # 1) LoodiKpv <= MuudetiKpv (if both exist)
    invalid_loodi = aadress_df[
        aadress_df["LoodiKpv"].notnull() &
        aadress_df["MuudetiKpv"].notnull() &
        (aadress_df["LoodiKpv"] > aadress_df["MuudetiKpv"])
    ]
    assert invalid_loodi.empty, (
        f"Leidsime ridasid, kus LoodiKpv > MuudetiKpv:\n{invalid_loodi}"
    )

    # 2) If KustutatiKpv is filled => we assume KdIDAdressiStaatus='KEHTETU' (104)
    has_kust = aadress_df["KustutatiKpv"].notnull()
    if "KdIDAdressiStaatus" in aadress_df.columns:
        problem = aadress_df[has_kust & (aadress_df["KdIDAdressiStaatus"] != 104)]
        assert problem.empty, (
            "Kui aadress on KustutatiKpv-ga, eeldame staatus=KEHTETU (104). "
            f"Leidsime:\n{problem}"
        )
    else:
        pytest.skip("Puudub 'KdIDAdressiStaatus', ei saa KustutatiKpv reeglit testida.")


##############################################################################
# 4) Tests for the address component CSV (02_aadresskomponent.csv)
##############################################################################

def test_aadresskomp_status_fk(aadress_komp_df, kodifikaator_df):
    """
    Check that 'KdIDStaatus' is a valid KdID in the kodifikaator.
    """
    check_kdid_foreign_key(
        df=aadress_komp_df,
        column_name="KdIDStaatus",
        kodifikaator_df=kodifikaator_df,
        error_msg="Leidsime tundmatuid KdIDStaatus (aadresskomponent):"
    )


def test_aadresskomp_dates(aadress_komp_df, kodifikaator_df):
    """
    Checks logical conditions in generate_aadress_komponent:
      - AKpKehtivAlatesKpv <= AKpKehtivKuniKpv
      - LoodiKpv <= AKpKehtivAlatesKpv
      - if AKpKehtivKuniKpv is present => KdIDStaatus= KEHTETU
    """
    invalid_range = aadress_komp_df[
        aadress_komp_df["AKpKehtivKuniKpv"].notnull() &
        (aadress_komp_df["AKpKehtivAlatesKpv"] > aadress_komp_df["AKpKehtivKuniKpv"])
    ]
    assert invalid_range.empty, (
        f"Leidsime aadresskomponente, kus KehtivAlates>KehtivKuni:\n{invalid_range}"
    )

    bad_loodi = aadress_komp_df[
        aadress_komp_df["LoodiKpv"].notnull() &
        aadress_komp_df["AKpKehtivAlatesKpv"].notnull() &
        (aadress_komp_df["LoodiKpv"] > aadress_komp_df["AKpKehtivAlatesKpv"])
    ]
    assert bad_loodi.empty, (
        f"LoodiKpv ei tohiks olla hiljem kui AKpKehtivAlatesKpv:\n{bad_loodi}"
    )

    kd_kehtetu = get_kdid_for_name(kodifikaator_df, "KEHTETU")
    if kd_kehtetu is not None and "KdIDStaatus" in aadress_komp_df.columns:
        problem2 = aadress_komp_df[
            aadress_komp_df["AKpKehtivKuniKpv"].notnull() &
            (aadress_komp_df["KdIDStaatus"] != kd_kehtetu)
        ]
        assert problem2.empty, (
            f"Kui aadresskomponent on KEHTETU (AKpKehtivKuniKpv täidetud), "
            f"siis KdIDStaatus peaks olema {kd_kehtetu}. "
            f"Leidsime:\n{problem2}"
        )
    else:
        pytest.skip("Ei leidnud KEHTETU koodi või puudub 'KdIDStaatus'.")


def test_aadresskomp_extra_cols(aadress_komp_df):
    """
    Checks for the presence of additional columns (e.g., 'IAsIDLooja', 'TsID', etc.),
    as required by the generate_aadress_komponent function. 
    """
    extra_cols = [
        "IAsIDLooja", "IAsIDMuutja", "MuudetiKpv", "KustutatiKpv",
        "KdIDAkpLiik", "AkpUnikaalsus", "AKpIDAds", "TsID",
        "AKpTase7NumberOsa", "AKpRoopNimi", "ADS_KOMP_ID",
        "ADS_TASE", "ADS_KOOD", "ADS_NIMETUS", "ADS_NIMETUS_LIIGIGA",
        "ADS YLEKOMP_TASE", "ADS_YLEKOMP_KOOD", "ADS_KETHIV",
        "ADS_KEHTETU", "ADS_MUUDETI", "ADS_RR_NIMED", "ADSILID"
    ]
    missing = [c for c in extra_cols if c not in aadress_komp_df.columns]
    assert not missing, f"Puuduvad veerud aadresskomponent failist: {missing}"

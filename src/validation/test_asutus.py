import pytest
import os
import pandas as pd
from src.generation.utils import get_kdid_for_name

########################################################################
# 1) Pytest fixtures that read CSV files from the 'output' folder
########################################################################

@pytest.fixture
def kodifikaator_df():
    """
    Reads 'data/kodifikaator.csv' as the code table.
    We assume it has columns like:
       ['KdID', 'KdLyhikeNimi', 'KdKodifikaatoriKood', ...].
    """
    path = os.path.join("data", "kodifikaator.csv")
    df = pd.read_csv(path, encoding='ISO-8859-1')
    return df

@pytest.fixture
def asutus_df():
    """
    Reads the '03_asutus.csv' file generated by the asutuse table creation code.
    We parse date columns such as AsAlguseKpv, AsLopuKpv, etc.
    """
    path = os.path.join("output", "03_asutus.csv")
    return pd.read_csv(
        path,
        parse_dates=["AsAlguseKpv","AsLopuKpv","LoodiKpv","MuudetiKpv","KustutatiKpv"],
        encoding='ISO-8859-1'
    )

@pytest.fixture
def isik_asutus_df():
    """
    Reads the '04_isik_asutus.csv' file for the IsikAsutus table.
    Also parses relevant date columns.
    """
    path = os.path.join("output", "04_isik_asutus.csv")
    return pd.read_csv(
        path,
        parse_dates=["IAsAlgusKpv","IAsKinniKpv","LoodiKpv","MuudetiKpv","KustutatiKpv"],
        encoding='ISO-8859-1'
    )

########################################################################
# 2) Tests for the final asutus CSV (03_asutus.csv)
########################################################################

def test_asutus_fk_kodifikaator(asutus_df, kodifikaator_df):
    """
    Example: if asutus_df has a column 'KdIDStaatus',
    verify that it is found among the kodifikaator_df['KdID'].
    """
    if 'KdIDStaatus' not in asutus_df.columns:
        pytest.skip("Asutus-tabelis pole KdIDStaatus veergu, j√§tame vahele.")
    
    used_codes = set(asutus_df["KdIDStaatus"].dropna().unique())
    valid_codes = set(kodifikaator_df["KdID"].dropna().unique())
    invalids = used_codes - valid_codes
    assert not invalids, f"Leidsime asutuses KdIDStaatus koodid, mida kodifikaator ei tunne: {invalids}"

def test_asutus_dates(asutus_df):
    """
    Checks some business logic rules for dates in '03_asutus.csv':
      1) AsAlguseKpv <= AsLopuKpv (if LopuKpv is not null)
      2) LoodiKpv <= AsAlguseKpv
      3) If KustutatiKpv is filled, we assume it == AsLopuKpv
         (based on the code logic that sets it to AsLopuKpv if present).
    """
    # 1) AsAlguseKpv <= AsLopuKpv
    bad_range = asutus_df[
        asutus_df["AsLopuKpv"].notnull() &
        (asutus_df["AsAlguseKpv"] > asutus_df["AsLopuKpv"])
    ]
    assert bad_range.empty, f"AsAlguseKpv > AsLopuKpv ridad: \n{bad_range}"

    # 2) LoodiKpv <= AsAlguseKpv
    bad_loodi = asutus_df[
        asutus_df["LoodiKpv"] > asutus_df["AsAlguseKpv"]
    ]
    assert bad_loodi.empty, f"LoodiKpv ei tohi olla hiljem kui AsAlguseKpv:\n{bad_loodi}"

    # 3) KustutatiKpv == AsLopuKpv (if both are filled)
    mismatch = asutus_df[
        asutus_df["KustutatiKpv"].notnull() &
        asutus_df["AsLopuKpv"].notnull() &
        (asutus_df["KustutatiKpv"] != asutus_df["AsLopuKpv"])
    ]
    assert mismatch.empty, (
        "Kui asutus on kustutatud, eeldame, et KustutatiKpv == AsLopuKpv.\n"
        f"Kuid leidus ridasid:\n{mismatch}"
    )

########################################################################
# 4) Tests for the final isik_asutus CSV (04_isik_asutus.csv)
########################################################################

def test_isik_asutus_fk_asutus(isik_asutus_df, asutus_df):
    """
    Checks that IsikAsutus.AsID is found in Asutus.AsID (Foreign Key rule).
    """
    if "AsID" not in isik_asutus_df.columns:
        pytest.skip("IsikAsutus-s pole AsID veergu, ei saa FK kontrolli teha.")
    if "AsID" not in asutus_df.columns:
        pytest.skip("Asutus-s pole AsID veergu, ei saa FK kontrolli teha.")

    asutus_ids = set(asutus_df["AsID"].dropna().unique())
    used_asids = set(isik_asutus_df["AsID"].dropna().unique())

    missing = [a for a in used_asids if a not in asutus_ids]
    assert not missing, f"IsikAsutus.AsID viitab puuduvale AsID-le: {missing}"

def test_isik_asutus_dates(isik_asutus_df, kodifikaator_df):
    """
    Business logic checks:
      - IAsAlgusKpv <= IAsKinniKpv (if not None)
      - LoodiKpv <= IAsAlgusKpv
      - If KustutatiKpv is set, we expect KdIDStaatus= KEHTETU
    """
    # 1) Algus <= Kinni
    invalid_range = isik_asutus_df[
        isik_asutus_df["IAsKinniKpv"].notnull() &
        (isik_asutus_df["IAsAlgusKpv"] > isik_asutus_df["IAsKinniKpv"])
    ]
    assert invalid_range.empty, f"Leidsime IAsAlgusKpv > IAsKinniKpv:\n{invalid_range}"

    # 2) LoodiKpv <= IAsAlgusKpv
    invalid_loodi = isik_asutus_df[
        isik_asutus_df["LoodiKpv"] > isik_asutus_df["IAsAlgusKpv"]
    ]
    assert invalid_loodi.empty, (
        f"LoodiKpv ei tohiks olla hiljem kui IAsAlgusKpv:\n{invalid_loodi}"
    )

    # 3) If KustutatiKpv => expect KdIDStaatus= KEHTETU
    if "KdIDStaatus" in isik_asutus_df.columns:
        kd_kehtetu = get_kdid_for_name(kodifikaator_df, 'KEHTETU')
        problem_rows = isik_asutus_df[
            isik_asutus_df["KustutatiKpv"].notnull() &
            (isik_asutus_df["KdIDStaatus"] != kd_kehtetu)
        ]
        assert problem_rows.empty, (
            f"KustutatiKpv -> eeldame staatus=KEHTETU, "
            f"kuid leidsime:\n{problem_rows}"
        )
    else:
        pytest.skip("IsikAsutus-tabelist puudub 'KdIDStaatus' veerg; ei saa staatusloogikat testida.")
